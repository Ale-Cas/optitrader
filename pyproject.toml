[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]  # https://python-poetry.org/docs/pyproject/
name = "optitrader"
version = "0.2.2"
description = "Optitrader is an open-source Python package for portfolio optimization and algorithmic trading. "
authors = ["Alessio Castrica <castricaalessio@gmail.com>"]
readme = "README.md"
repository = "https://github.com/Ale-Cas/optitrader"

[tool.commitizen]  # https://commitizen-tools.github.io/commitizen/config/
bump_message = "bump(release): v$current_version ‚Üí v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version = "0.0.0"
version_files = ["pyproject.toml:version"]

[tool.poetry.scripts]  # https://python-poetry.org/docs/pyproject/#scripts
optitrader = "optitrader.cli:app"

[tool.poetry.dependencies]  # https://python-poetry.org/docs/dependency-specification/
coloredlogs = ">=15.0.1"
fastapi = { extras = ["all"], version = ">=0.92.0" }
gunicorn = ">=20.1.0"
poethepoet = ">=0.20.0"
pydantic = ">=2.5.2"
python = ">=3.10,<4.0"
streamlit = ">=1.43.2"
typer = { extras = ["all"], version = ">=0.9.0" }
uvicorn = { extras = ["standard"], version = ">=0.20.0" }
pandas = ">=2.2.3"
cvxpy = ">=1.6.4"
alpaca-py = "^0.13.4"
yahooquery = "^2.3.1"
matplotlib = "^3.7.1"
typeguard = "^4.0.0"
plotly = ">=5.15.0"
html5lib = "^1.1"
lxml = "==4.9.2"
finnhub-python = "^2.4.18"
sqlalchemy = "^2.0.19"
watchdog = "^3.0.0"
certifi = "^2023.11.17"
nbformat = "^5.9.2"
protobuf = "^4.25.1"
nbconvert = "^7.12.0"
scipy = "^1.11.4"
urllib3 = "^2.1.0"
jupyter-server = "^2.12.1"
requests = ">=2.32.3"

[tool.poetry.group.test.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
commitizen = ">=3.2.1"
coverage = { extras = ["toml"], version = ">=7.2.5" }
mypy = ">=1.2.0"
pre-commit = ">=3.3.1"
pytest = ">=8.0.2"
pytest-clarity = ">=1.0.1"
pytest-mock = ">=3.10.0"
pytest-xdist = ">=3.2.1"
ruff = ">=0.2.0"
pytest-vcr = "^1.0.2"
pytest-timeout = "^2.1.0"
types-requests = "^2.32.0.20250306"

[tool.poetry.group.dev.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
cruft = ">=2.14.0"
jupyterlab = ">=3.6.3, <=4.0.2"
pdoc = ">=13.1.1"

[tool.black]  # https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 100
target-version = ["py310"]

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
plugins = "pydantic.mypy"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --verbosity=2 --junitxml=reports/pytest.xml"
testpaths = ["src", "tests"]
xfail_strict = true
markers = [
    "my_vcr: custom vcr matcher",
]

[tool.ruff]  # https://github.com/charliermarsh/ruff
fix = true
line-length = 100
src = ["src", "tests"]
target-version = "py310"

[tool.ruff.lint]
select = ["A", "ASYNC", "B", "C4", "C90", "D", "DTZ", "E", "F", "FLY", "I", "ISC", "N", "NPY", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PT", "RET", "RUF", "RSE", "SIM", "TID", "UP", "W", "YTT"]
ignore = ["E501", "S307", "G010", "PGH003", "RET504", "S101", "DTZ011", "DTZ003", "PLR0913"]
unfixable = ["F401", "F841"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.poe.tasks]  # https://github.com/nat-n/poethepoet

  [tool.poe.tasks.api]
  help = "Serve a REST API"
  shell = """
    if [ $dev ]
    then {
      uvicorn \
        --host $host \
        --port $port \
        --reload \
        optitrader.api:app
    } else {
      gunicorn \
        --access-logfile - \
        --bind $host:$port \
        --graceful-timeout 10 \
        --keep-alive 10 \
        --log-file - \
        --timeout 30 \
        --worker-class uvicorn.workers.UvicornWorker \
        --worker-tmp-dir /dev/shm \
        --workers 2 \
        optitrader.api:app
    } fi
    """

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this host (default: 0.0.0.0)"
    name = "host"
    options = ["--host"]
    default = "0.0.0.0"

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this port (default: 8080)"
    name = "port"
    options = ["--port"]
    default = "8080"

    [[tool.poe.tasks.api.args]]
    help = "Enable development mode"
    type = "boolean"
    name = "dev"
    options = ["--dev"]

  [tool.poe.tasks.app]
  help = "Serve a Streamlit app"
  cmd = """
    streamlit run
      --browser.gatherUsageStats false
      --server.address $host
      --server.port $port
      --theme.base dark
      src/optitrader/app/1_üè†_Home.py
    """
  use_exec = true

    [[tool.poe.tasks.app.args]]
    help = "Bind socket to this host (default: 0.0.0.0)"
    name = "host"
    options = ["--host"]
    default = "0.0.0.0"

    [[tool.poe.tasks.app.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"

  [tool.poe.tasks.docs]
  help = "Generate this package's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      optitrader
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: numpy)"
    name = "docformat"
    options = ["--docformat"]
    default = "numpy"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"

  [tool.poe.tasks.lab]
  help = "Run Jupyter Lab"

    [[tool.poe.tasks.lab.sequence]]
    cmd = "mkdir -p notebooks"

    [[tool.poe.tasks.lab.sequence]]
    cmd = """
      jupyter lab
        --allow-root
        --notebook-dir notebooks
      """

  [tool.poe.tasks.lint]
  help = "Lint this package"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"
